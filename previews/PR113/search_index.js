var documenterSearchIndex = {"docs":
[{"location":"examples/svesm/#SVESM","page":"SVESM","title":"SVESM","text":"","category":"section"},{"location":"examples/svesm/","page":"SVESM","title":"SVESM","text":"Leveraging the similarities between kernel methods and Reservoir Computing, the paper [1] introduced the concept of Support Vector Echo State Machines (SVESMs). Using the package LIBSVM the SVESMs are implemented in ReservoirComputing.jl. We will give an example of usage introducing the direct predict function as well. The goal is again the prediction of the Lorenz system.","category":"page"},{"location":"examples/svesm/","page":"SVESM","title":"SVESM","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))\n\nshift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/svesm/#References","page":"SVESM","title":"References","text":"","category":"section"},{"location":"examples/svesm/","page":"SVESM","title":"SVESM","text":"[1]: Shi, Zhiwei, and Min Han. \"Support vector echo-state machine for chaotic time-series prediction.\" IEEE Transactions on Neural Networks 18.2 (2007): 359-372.","category":"page"},{"location":"examples/dafesn/#Double-Activation-Function-ESN","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"","category":"section"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"One of the different variations of the ESN implemented in ReservoirComputing is the Double Activation Function ESN (DASFESN) [1]. The constructs are implemented in the same way as the ESN ones and the training is done with the same ESNtrain function. The only differences are the number of parameters and the predict function. Let's use the same Lorenz system example as always to see how to use this model.","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))\n\nshift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"Now we can define the parameters as before: this time we will have two activation functions instead of one and a linear coefficient for each function defined as first_lambda and second_lambda. For the second activation function we will use the sigmoid function, which can be either user-defined or borrowed from another package. We will use the implementation of NNlib.","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"using ReservoirComputing, NNlib\n#model parameters\napprox_res_size = 300\nradius = 1.2\ndegree = 6\nsigma = 0.1\nbeta = 0.0\nalpha = 1.0\nnla_type = NLAT2()\nextended_states = false\n\nfirst_lambda = 0.8\nsecond_lambda = 0.4\nfirst_activation = tanh\nsecond_activation = σ\n\n#create echo state network  \nRandom.seed!(42) #fixed seed for reproducibility\nesn = dafESN(approx_res_size,\n    train,\n    degree,\n    radius,\n    first_lambda,\n    second_lambda,\n    first_activation = first_activation,\n    second_activation = second_activation,\n    sigma = sigma,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"(Image: dafesnfixedseed)","category":"page"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"In this example we used the standard constructor but the user is free to define the input layer and reservoir in the same way we had showed before. Of course, one could also train the DAFESN using one of the already illustrated linear models.","category":"page"},{"location":"examples/dafesn/#References","page":"Double Activation Function ESN","title":"References","text":"","category":"section"},{"location":"examples/dafesn/","page":"Double Activation Function ESN","title":"Double Activation Function ESN","text":"[1]: Lun, Shu-Xian, et al. \"A novel model of leaky integrator echo state network for time-series prediction.\" Neurocomputing 159 (2015): 58-66.","category":"page"},{"location":"user/models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"user/models/#Echo-State-Network","page":"Models","title":"Echo State Network","text":"","category":"section"},{"location":"user/models/","page":"Models","title":"Models","text":"Constructor","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    ESN","category":"page"},{"location":"user/models/#ReservoirComputing.ESN","page":"Models","title":"ReservoirComputing.ESN","text":"ESN()\n\n\n\n\n\n","category":"type"},{"location":"user/models/","page":"Models","title":"Models","text":"Train","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    ESNtrain","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"General function for training, used for all the AbstractReservoirComputers types with the exception of RMM which has the training method inside the constructor.","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"Predict","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    ESNpredict\n    ESNpredict_h_steps","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"For a full list of training and prediction methods for ESNs please refer to the User Guide ESN mods.","category":"page"},{"location":"user/models/#Double-Activation-Function-Echo-State-Network","page":"Models","title":"Double Activation Function Echo State Network","text":"","category":"section"},{"location":"user/models/","page":"Models","title":"Models","text":"Constructor","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    dafESN","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"Predict","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    dafESNpredict\n    dafESNpredict_h_steps","category":"page"},{"location":"user/models/#Reservoir-Computing-with-Cellular-Automata","page":"Models","title":"Reservoir Computing with Cellular Automata","text":"","category":"section"},{"location":"user/models/","page":"Models","title":"Models","text":"Constructors","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    RECA_discrete\n    RECA_TwoDim","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"Predict","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    RECAdirect_predict_discrete\n    RECATDdirect_predict_discrete\n    RECATD_predict_discrete","category":"page"},{"location":"user/models/#Reservoir-Memory-Machine","page":"Models","title":"Reservoir Memory Machine","text":"","category":"section"},{"location":"user/models/","page":"Models","title":"Models","text":"Constructor","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    RMM","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"Predict","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    RMMdirect_predict","category":"page"},{"location":"user/models/#Gated-Recurrent-Unit-ESN","page":"Models","title":"Gated Recurrent Unit ESN","text":"","category":"section"},{"location":"user/models/","page":"Models","title":"Models","text":"Constructor","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    GRUESN","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"Predict","category":"page"},{"location":"user/models/","page":"Models","title":"Models","text":"    GRUESNpredict","category":"page"},{"location":"user/nla/#Non-Linear-Algorithm","page":"Non Linear Algorithm","title":"Non Linear Algorithm","text":"","category":"section"},{"location":"user/nla/","page":"Non Linear Algorithm","title":"Non Linear Algorithm","text":"    NLADefault\n    NLAT1\n    NLAT2\n    NLAT3","category":"page"},{"location":"user/nla/#ReservoirComputing.NLADefault","page":"Non Linear Algorithm","title":"ReservoirComputing.NLADefault","text":"NLADefault()\n\nReturn the array untouched, default option.\n\n\n\n\n\n","category":"type"},{"location":"user/nla/#ReservoirComputing.NLAT1","page":"Non Linear Algorithm","title":"ReservoirComputing.NLAT1","text":"NLAT1()\n\nApply the $ \\text{T}_1 $ transformation algorithm, as defined in [1] and [2].\n\n[1] Chattopadhyay, Ashesh, et al. \"Data-driven prediction of a multi-scale Lorenz 96 chaotic system using a hierarchy of deep learning methods: Reservoir computing, ANN, and RNN-LSTM.\" (2019).\n\n[2] Pathak, Jaideep, et al. \"Model-free prediction of large spatiotemporally chaotic systems from data: A reservoir computing approach.\" Physical review letters 120.2 (2018): 024102.\n\n\n\n\n\n","category":"type"},{"location":"user/nla/#ReservoirComputing.NLAT2","page":"Non Linear Algorithm","title":"ReservoirComputing.NLAT2","text":"NLAT2()\n\nApply the $ \\text{T}_2 $ transformation algorithm, as defined in [1].\n\n[1] Chattopadhyay, Ashesh, et al. \"Data-driven prediction of a multi-scale Lorenz 96 chaotic system using a hierarchy of deep learning methods: Reservoir computing, ANN, and RNN-LSTM.\" (2019).\n\n\n\n\n\n","category":"type"},{"location":"user/nla/#ReservoirComputing.NLAT3","page":"Non Linear Algorithm","title":"ReservoirComputing.NLAT3","text":"NLAT3()\n\nApply the $ \\text{T}_3 $ transformation algorithm, as defined in [1].\n\n[1] Chattopadhyay, Ashesh, et al. \"Data-driven prediction of a multi-scale Lorenz 96 chaotic system using a hierarchy of deep learning methods: Reservoir computing, ANN, and RNN-LSTM.\" (2019).\n\n\n\n\n\n","category":"type"},{"location":"examples/esgp/#ESGP","page":"ESGP","title":"ESGP","text":"","category":"section"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"The linear nature of the ESN training allows for a solution obtained by Gaussian Regression. This was the main idea behind the paper [1], which details the implementation of the Echo State Gaussian Processes that are present in ReservoirComputing. Using the same example as before, prediction of the Lorenz system, we are going to show how to use this specific model.","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))\n\nshift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"Now we can define the parameters and create the ESN in the usual way:","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"using ReservoirComputing\n#model parameters\napprox_res_size = 300\nradius = 1.2\nactivation = tanh\ndegree = 6\nsigma = 0.1\nbeta = 0.0\nalpha = 1.0\nnla_type = NLADefault()\nextended_states = true\n\n#create echo state network  \nRandom.seed!(42) #fixed seed for reproducibility\nesn = ESN(approx_res_size,\n    train,\n    degree,\n    radius,\n    activation = activation,\n    sigma = sigma,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"Using the package GaussianProcesses we were able to implement a training and a predict function for the ESN. In order to use them, we need to import the package.","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"using GaussianProcesses\nmean = MeanZero()\nkernel = SE(1.0, 1.0)\ngp = ESGPtrain(esn, mean, kernel, lognoise = -2.0, optimize = false);\noutput, sigmas = ESGPpredict(esn, predict_len, gp)","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"(Image: esgpfixedseed)","category":"page"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"Since the implementation of this model is based on an external package, the user is free to choose a different mean or kernel, as well as use different input layers and reservoirs (as previously defined).","category":"page"},{"location":"examples/esgp/#References","page":"ESGP","title":"References","text":"","category":"section"},{"location":"examples/esgp/","page":"ESGP","title":"ESGP","text":"[1]: Chatzis, Sotirios P., and Yiannis Demiris. \"Echo state Gaussian process.\" IEEE Transactions on Neural Networks 22.9 (2011): 1435-1445.","category":"page"},{"location":"examples/esn/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"The following is a basic example that will introduce the reader to the function and structs of the ReservoirComputing library.","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"The goal for this example is to predict the Lorenz system, so first we need to obtain the data.","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"Now that we have the data, we can create two datasets, one for the training and another to test the results obtained:","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"shift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"It is always a good idea to add a shift in order to wash out any initial transient. Having the data, we can proceed to creating the ESN for the prediction:","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"using ReservoirComputing\n#model parameters\napprox_res_size = 300 #size of the reservoir\nradius = 1.2 #desired spectral radius\nactivation = tanh #neuron activation function\ndegree = 6 #degree of connectivity of the reservoir\nsigma = 0.1 # input weight scaling\nbeta = 0.0 #ridge\nalpha = 1.0 #leaky coefficient\nnla_type = NLAT2() #non linear algorithm for the states\nextended_states = false # if true extends the states with the input\n\n#create echo state network  \nesn = ESN(approx_res_size,\n    train,\n    degree,\n    radius,\n    activation = activation,\n    sigma = sigma,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"Since this is an introductory example, we wanted to show all possible parameters, even though the same values that we defined are the default ones of the ESN constructor. For the training and the prediction we just need the following two lines:","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"W_out = ESNtrain(esn, beta)\noutput = ESNpredict(esn, predict_len, W_out) #applies standard ridge regression for the training","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"Now, if we want to check the results, we can plot the output and the test dataset:","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"using Plots\nplot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/esn/","page":"Basics","title":"Basics","text":"(Image: lorenz_coord)","category":"page"},{"location":"examples/linear/#Using-different-linear-methods","page":"Using different linear methods","title":"Using different linear methods","text":"","category":"section"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"The standard implementation of ESNtrain uses Ridge Regression as the method of choice for the training of the ESN but there are other linear methods available. Leveraging MLJLinearModels ReservoirComputing gives the possibility to train ESNs using a vast range of linear models. Using the same task as before, predicting the Lorenz system, we will illustrate how to use ESNtrain with Lasso, Elastic Net, and regression with Huber loss function.","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"First, we obtain the data in the usual way:","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))\n\nshift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"And we can also use the same parameters:","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"using ReservoirComputing\n#model parameters\napprox_res_size = 300\nradius = 1.2\nactivation = tanh\ndegree = 6\nsigma = 0.1\nalpha = 1.0\nnla_type = NLAT2()\nextended_states = false\n\n#create echo state network  \nesn = ESN(approx_res_size,\n    train,\n    degree,\n    radius,\n    activation = activation,\n    sigma = sigma,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"To obtain W_out, we can define a linear_model struct using one of the implemented constructors:","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Ridge()\nLasso()\nElastNet()\nRobustHuber()","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Each of them takes as input the regularization coefficient(s) and a MLJLinearModels.Solver as solver. Let's see a couple of examples. Using Ridge():","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"using MLJLinearModels\nlinear_model = Ridge(beta, Analytical())\nW_out = ESNtrain(linear_model, esn)\noutput = ESNpredict(esn, predict_len, W_out)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"(Image: esnRidgefixedseed)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Using Lasso():","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"beta = 0.0001\nlinear_model = Lasso(beta, ProxGrad(max_iter = 10000))\nW_out = ESNtrain(linear_model, esn)\noutput = ESNpredict(esn, predict_len, W_out)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"(Image: esnLassofixedseed)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Since in the linear model struct we used a MLJLinearModels.Solver, we can specify any parameter necessary, like in this case the max_iter.","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Using ElastNet():","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"lambda = 0.1\ngamma = 0.0001\nlinear_model = ElastNet(lambda, gamma, ProxGrad(max_iter = 10000))\nW_out = ESNtrain(linear_model, esn)\noutput = ESNpredict(esn, predict_len, W_out)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"(Image: esnElastNetfixedseed)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"Using RobustHuber():","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"delta = 0.5\nlambda = 0.1\ngamma = 0.0\nlinear_model = RobustHuber(lambda, gamma, LBFGS())\nW_out = ESNtrain(linear_model, esn)\noutput = ESNpredict(esn, predict_len, W_out)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"(Image: esnHuberfixedseed)","category":"page"},{"location":"examples/linear/","page":"Using different linear methods","title":"Using different linear methods","text":"For the complete list of solvers please refer to MLJLinearModels solvers","category":"page"},{"location":"user/layers/#Layers","page":"Layers","title":"Layers","text":"","category":"section"},{"location":"user/layers/#Input-Layers","page":"Layers","title":"Input Layers","text":"","category":"section"},{"location":"user/layers/","page":"Layers","title":"Layers","text":"    init_input_layer\n    init_dense_input_layer\n    init_sparse_input_layer\n    min_complex_input\n    irrational_sign_input","category":"page"},{"location":"user/layers/#Reservoirs","page":"Layers","title":"Reservoirs","text":"","category":"section"},{"location":"user/layers/","page":"Layers","title":"Layers","text":"    init_reservoir_givendeg\n    init_reservoir_givensp\n    pseudoSVD\n    DLR\n    DLRB\n    SCR\n    CRJ","category":"page"},{"location":"user/layers/","page":"Layers","title":"Layers","text":"Reservoirs only usable for RECA models:","category":"page"},{"location":"user/layers/","page":"Layers","title":"Layers","text":"    ECA\n    GameOfLife","category":"page"},{"location":"examples/layers/#Using-different-layers","page":"Using different layers","title":"Using different layers","text":"","category":"section"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"The composability of the ESN struct allows for the construction of the model with different reservoirs or input layers. In ReservoirComputing.jl there are different implementations of these layers found in the literature, but, of course, one is free to build a custom implementation. Following the prior example, we will continue to use the Lorenz system prediction as our test.","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"using ParameterizedFunctions, OrdinaryDiffEq\n\n#lorenz system parameters\nu0 = [1.0,0.0,0.0]                       \ntspan = (0.0,1000.0)                      \np = [10.0,28.0,8/3]\n\n#define lorenz system\nfunction lorenz(du,u,p,t)\n    du[1] = p[1]*(u[2]-u[1])\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend\n\n#solve system\nprob = ODEProblem(lorenz, u0, tspan, p)  \nsol = solve(prob, ABM54(), dt=0.02)   \nv = sol.u\ndata = Matrix(hcat(v...))\n\nshift = 300\ntrain_len = 5000\npredict_len = 1250\n\n#get data\ntrain = data[:, shift:shift+train_len-1]\ntest = data[:, shift+train_len:shift+train_len+predict_len-1]","category":"page"},{"location":"examples/layers/#Delay-Line-Reservoir-and-dense-input-layer","page":"Using different layers","title":"Delay Line Reservoir and dense input layer","text":"","category":"section"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"In order to change the default reservoir and input layer, we first need to define the ones we want to use. With the same parameters as the example before, we can define the ESN as follows:","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"using ReservoirComputing\n#model parameters\napprox_res_size = 300\nradius = 1.2\nactivation = tanh\ndegree = 6\nsigma = 0.1\nbeta = 0.0\nalpha = 1.0\nnla_type = NLADefault()\nextended_states = true\n\n#define the weight for the reservoir\nr= 0.95\n\n#define reservoir and input layer\nRandom.seed!(42) #fixed seed for reproducibility\nW = DLR(approx_res_size, r)\nW_in = init_dense_input_layer(approx_res_size, size(train, 1), sigma)\n\n#create echo state network  \nesndlr = ESN(W,\n    train,\n    W_in,\n    activation = activation,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)\n\n#training and prediction\nW_out = ESNtrain(esndlr, beta)\noutput = ESNpredict(esndlr, predict_len, W_out)","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"And we can plot the results as before:","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"(Image: esndlrfixedseed)","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"The reservoir used is taken from the paper [1]. The other reservoir illustrated therein are implemented in this package.","category":"page"},{"location":"examples/layers/#Pseudo-SVD-reservoir-and-irrational-input-layer","page":"Using different layers","title":"Pseudo SVD reservoir and irrational input layer","text":"","category":"section"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"Using another architecture just to have more examples, we can define the ESN using the reservoir obtained from the SVD-like method [2] and the irrational input layer, as described in [1]. We are going to use the same parameters as before, only adding the necessary ones for the construction of the new layers.","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"max_value = 1.5\nsparsity = 0.15\n\n#constructing the pseudo svd reservoir and irrational input layer\nW = pseudoSVD(approx_res_size, max_value, sparsity)\nW_in = irrational_sign_input(approx_res_size, size(train, 1), sigma)\n\nesnsvd = ESN(W,\n    train,\n    W_in,\n    activation = activation,\n    alpha = alpha,\n    nla_type = nla_type,\n    extended_states = extended_states)\n\n#training and prediction\nW_out = ESNtrain(esnsvd, beta)\noutput = ESNpredict(esnsvd, predict_len, W_out)","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"And, of course, the result can be plotted as always:","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"plot(transpose(output),layout=(3,1), label=\"predicted\")\nplot!(transpose(test),layout=(3,1), label=\"actual\")","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"(Image: esnsvdfixedseed)","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"As we can see, the results can vary wildly from one architecture to another, so be careful with the choice of the layers.","category":"page"},{"location":"examples/layers/#References","page":"Using different layers","title":"References","text":"","category":"section"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"[1]: Rodan, Ali, and Peter Tino. \"Minimum complexity echo state network.\" IEEE transactions on neural networks 22.1 (2010): 131-144.","category":"page"},{"location":"examples/layers/","page":"Using different layers","title":"Using different layers","text":"[2]\" Yang, Cuili, et al. \"Design of polynomial echo state networks for time series prediction.\" Neurocomputing 290 (2018): 148-160.","category":"page"},{"location":"#Overview","page":"ReservoirComputing.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"Reservoir Computing is an umbrella term used to describe a family of models such as Echo State Networks (ESNs) and Liquid State Machines (LSMs). The key concept is to expand the input data into a higher dimension and use regression in order to train the model; in some ways Reservoir Computers can be considered similar to kernel methods.","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"info: Introductory material\nThis library assumes some basic knowledge of Reservoir Computing. For a good introduction, we suggest the following papers: the first two are the seminal papers about ESN and LSM, the others are in-depth review papers that should cover all the needed information.Jaeger, Herbert: The “echo state” approach to analysing and training recurrent neural networks-with an erratum note.\nMaass W, Natschläger T, Markram H: Real-time computing without stable states: a new framework for neural computation based on perturbations.\nLukoševičius, Mantas: A practical guide to applying echo state networks.\" Neural networks: Tricks of the trade.\nLukoševičius, Mantas, and Herbert Jaeger: Reservoir computing approaches to recurrent neural network training.","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"In this package (for the moment) there are the following models:","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"Echo State Networks (ESNs)\nSupport Vector Echo State Machines [1] (SVESMs)\nEcho State Gaussian Processes [2] (ESGPs)\nReservoir Computing with Cellular Automata [3] (RECAs)\nReservoir Memory Machine [4] (RMMs)\nDouble Activation Echo State Networks [5] (DAFESNs)","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"Multiple features are present as well, like the possibility of using a number of different reservoir and input layer architectures, as well as different linear regression methods. For more information on this please refer to the examples.","category":"page"},{"location":"#Installation","page":"ReservoirComputing.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"Since ReservoirComputing is registered in the Julia General Registry, it will suffice to do the following in the Julia REPL:","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"]add ReservoirComputing","category":"page"},{"location":"#References","page":"ReservoirComputing.jl","title":"References","text":"","category":"section"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"[1]: Shi, Zhiwei, and Min Han. \"Support vector echo-state machine for chaotic time-series prediction.\" IEEE Transactions on Neural Networks 18.2 (2007): 359-372.","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"[2]: Chatzis, Sotirios P., and Yiannis Demiris. \"Echo state Gaussian process.\" IEEE Transactions on Neural Networks 22.9 (2011): 1435-1445.","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"[3]: Yilmaz, Ozgur. \"Reservoir computing using cellular automata.\" arXiv preprint arXiv:1410.0162 (2014).","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"[4]: Paaßen, Benjamin, and Alexander Schulz. \"Reservoir memory machines.\" arXiv preprint arXiv:2003.04793 (2020).","category":"page"},{"location":"","page":"ReservoirComputing.jl","title":"ReservoirComputing.jl","text":"[5]: Lun, Shu-Xian, et al. \"A novel model of leaky integrator echo state network for time-series prediction.\" Neurocomputing 159 (2015): 58-66.","category":"page"},{"location":"user/linear/#Linear-Models","page":"Linear Models","title":"Linear Models","text":"","category":"section"},{"location":"user/linear/#Ridge","page":"Linear Models","title":"Ridge","text":"","category":"section"},{"location":"user/linear/","page":"Linear Models","title":"Linear Models","text":"    Ridge","category":"page"},{"location":"user/linear/#Lasso","page":"Linear Models","title":"Lasso","text":"","category":"section"},{"location":"user/linear/","page":"Linear Models","title":"Linear Models","text":"    Lasso","category":"page"},{"location":"user/linear/#ElastNet","page":"Linear Models","title":"ElastNet","text":"","category":"section"},{"location":"user/linear/","page":"Linear Models","title":"Linear Models","text":"    ElastNet","category":"page"},{"location":"user/linear/#Huber","page":"Linear Models","title":"Huber","text":"","category":"section"},{"location":"user/linear/","page":"Linear Models","title":"Linear Models","text":"    RobustHuber","category":"page"},{"location":"user/spec/#Special-ESNs","page":"Special ESNs","title":"Special ESNs","text":"","category":"section"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"These ESN are \"special\" in the fact that they have their own training methods. One of the future goals is to merge all the training methods into one. For all these models the constructor is the same, ESN.","category":"page"},{"location":"user/spec/#Support-Vector-Echo-State-Machines","page":"Special ESNs","title":"Support Vector Echo State Machines","text":"","category":"section"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"Train ","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"    SVESMtrain","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"Predict","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"    SVESM_direct_predict\n    SVESMpredict\n    SVESMpredict_h_steps","category":"page"},{"location":"user/spec/#Echo-State-Gaussian-Processes","page":"Special ESNs","title":"Echo State Gaussian Processes","text":"","category":"section"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"Train","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"    ESGPtrain","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"Predict","category":"page"},{"location":"user/spec/","page":"Special ESNs","title":"Special ESNs","text":"    ESGPpredict\n    ESGPpredict_h_steps","category":"page"}]
}
